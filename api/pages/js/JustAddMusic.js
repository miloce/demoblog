{"title":"","type":"page","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"\"use strict\"; var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descr...","date":"2023-11-05T05:46:25.198Z","updated":"2022-05-17T01:26:52.000Z","comments":true,"path":"api/pages/js/JustAddMusic.js","covers":null,"content":"\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n* MIT License\n* \n* Copyright (c) 2017 gskinner.com, inc.\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nvar JustAddMusic = function () {\n\tfunction JustAddMusic(config) {\n\t\t_classCallCheck(this, JustAddMusic);\n\n\t\tif (!config || typeof config === \"string\") {\n\t\t\tconfig = { src: config };\n\t\t}\n\n\t\t// public properties:\n\t\tthis.gain = config.gain || 1;\n\t\tthis.onstart = config.onstart;\n\t\tthis.ontick = config.ontick;\n\t\tthis.ondecode = config.ondecode;\n\t\tthis.onended = config.onended;\n\t\tthis.onprogress = config.onprogress;\n\t\tthis.label = config.label || \"\";\n\t\tthis.loop = !!config.loop;\n\n\t\t// private properties:\n\t\t// getter / setter values:\n\t\tthis._paused = !!config.paused;\n\t\tthis._keyControl = false;\n\t\tthis._tickInterval = 0;\n\t\tthis._tickIntervalID = 0;\n\n\t\t// file load:\n\t\tthis._request = null;\n\n\t\t// state:\n\t\tthis._playT = 0;\n\t\tthis._pausedT = 0;\n\t\tthis._ui = false;\n\t\tthis._uiDiv = null;\n\n\t\t// analyser:\n\t\tthis._audioData = null;\n\t\tthis._deltaT = config.deltaT || 50;\n\t\tthis._avgT = config.avgT || 150;\n\t\tthis._maxT = Math.max(this._deltaT, this._avgT);\n\t\tthis._allAdj = 0.1;\n\t\tthis._bandAdj = 0.1;\n\t\tthis._fftData = null;\n\t\tthis._fftBins = Math.max(0, Math.min(128, config.spectrumBins || 0));\n\t\tthis._fftThreshold = 0.65; // ignore off high frequencies beyond this point\n\n\t\t// hit detection:\n\t\tthis._hitThresholds = { low: 2, mid: 2, high: 2, all: 2 };\n\n\t\t// web audio:\n\t\tthis._context = null;\n\t\tthis._gainNode = null;\n\t\tthis._sourceNode = null;\n\t\tthis._buffer = null;\n\t\tthis._muteNode = null;\n\t\tthis._nullNode = null;\n\t\tthis._analyserNode = null;\n\n\t\t// method proxies:\n\t\tthis._bound_handleKeyDown = this._handleKeyDown.bind(this);\n\n\t\t// init:\n\t\tthis._initAudio();\n\t\tthis._initUI();\n\t\tthis._initDropTarget(config.dropTarget);\n\n\t\t// setup:\n\t\tthis.tickInterval = config.tickInterval;\n\t\tthis.loadAudio(config.src);\n\t\tthis.ui = config.ui === undefined ? true : config.ui;\n\t\tthis.keyControl = config.keyControl === undefined ? true : config.keyControl;\n\t\tthis.volume = config.volume === undefined ? 1 : config.volume;\n\t}\n\n\t// getter / setters:\n\n\n\t_createClass(JustAddMusic, [{\n\t\tkey: \"loadAudio\",\n\n\n\t\t// public methods:\n\t\t// file load:\n\t\tvalue: function loadAudio(src) {\n\t\t\tthis.abort();\n\n\t\t\t// Not paused, but no source node\n\t\t\tthis.disconnect();\n\n\t\t\tif (!src) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._updateLoadUI(0);\n\n\t\t\tvar request = this._request = new XMLHttpRequest();\n\t\t\trequest.open('GET', src, true);\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.addEventListener(\"load\", this._handleURILoad.bind(this));\n\t\t\trequest.addEventListener(\"progress\", this._handleURIProgress.bind(this));\n\t\t\trequest.send();\n\t\t}\n\t}, {\n\t\tkey: \"abort\",\n\t\tvalue: function abort() {\n\t\t\tthis._request && this._request.abort();\n\t\t\tthis._request = null;\n\t\t}\n\t}, {\n\t\tkey: \"disconnect\",\n\t\tvalue: function disconnect() {\n\t\t\tif (this._sourceNode) {\n\t\t\t\tthis._sourceNode.stop();\n\t\t\t\tthis._sourceNode.disconnect();\n\t\t\t\tthis._sourceNode = null;\n\t\t\t}\n\t\t}\n\n\t\t// playback:\n\n\t}, {\n\t\tkey: \"play\",\n\t\tvalue: function play() {\n\t\t\tvar _this = this;\n\n\t\t\tvar bufferChanged = (this._sourceNode && this._sourceNode.buffer) !== this._buffer;\n\n\t\t\tvar offset = this._pausedT;\n\t\t\tthis.pause(); // disconnect the old source node.\n\n\t\t\tvar source = this._sourceNode = this._context.createBufferSource();\n\t\t\tsource.buffer = this._buffer;\n\t\t\tsource.connect(this._nullNode);\n\t\t\tsource.start(0, offset);\n\t\t\tsource.addEventListener(\"ended\", function (evt) {\n\t\t\t\treturn _this._handleEnded(evt);\n\t\t\t});\n\n\t\t\tthis._playT = this._context.currentTime - offset;\n\t\t\tthis._paused = false;\n\n\t\t\tbufferChanged && this.onstart && this.onstart();\n\t\t}\n\t}, {\n\t\tkey: \"pause\",\n\t\tvalue: function pause() {\n\t\t\tif (!this._sourceNode || this._paused) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.disconnect();\n\t\t\tthis._pausedT = this._context.currentTime - this._playT;\n\t\t\tthis._paused = true;\n\t\t}\n\t}, {\n\t\tkey: \"stop\",\n\t\tvalue: function stop() {\n\t\t\tthis.abort();\n\t\t\tthis.pause();\n\t\t\tthis._pausedT = this._playT = 0;\n\t\t}\n\t}, {\n\t\tkey: \"seek\",\n\t\tvalue: function seek(time) {\n\t\t\tif (!this._buffer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.playT = 0;\n\t\t\tthis._pausedT = Math.min(this._buffer.duration - 0.001, Math.max(0, time));\n\t\t\tif (!this._paused) {\n\t\t\t\tthis.play();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"skip\",\n\t\tvalue: function skip(time) {\n\t\t\tthis.seek(this._context.currentTime - this._playT + time);\n\t\t}\n\t}, {\n\t\tkey: \"tick\",\n\t\tvalue: function tick() {\n\t\t\tif (!this._sourceNode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._updateTimeUI();\n\t\t\tif (!this.ontick && this._tickIntervalID) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t!this._allAnalyser && this._initAnalyser();\n\n\t\t\tvar o = this._oldObj || { low: {}, mid: {}, high: {}, all: {} },\n\t\t\t    data = this._audioData;\n\t\t\tthis._oldObj = null;\n\t\t\tdata.unshift(o);\n\n\t\t\tvar t = o.t = this._context.currentTime * 1000;\n\t\t\tthis._getVal(o.all, this._allAnalyser, t, true);\n\t\t\tthis._getVal(o.low, this._lowAnalyser, t);\n\t\t\tthis._getVal(o.mid, this._midAnalyser, t);\n\t\t\tthis._getVal(o.high, this._highAnalyser, t);\n\n\t\t\tthis._calculate();\n\t\t\tthis._calculateSpectrum(o);\n\n\t\t\tthis.ontick && this.ontick(o);\n\t\t\treturn o;\n\t\t}\n\t}, {\n\t\tkey: \"toString\",\n\t\tvalue: function toString() {\n\t\t\treturn \"[JustAddMusic]\";\n\t\t}\n\n\t\t// private methods:\n\n\t}, {\n\t\tkey: \"_initAudio\",\n\t\tvalue: function _initAudio() {\n\t\t\tvar ctx = this._context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\tthis._gainNode = ctx.createGain();\n\t\t\tthis._gainNode.connect(ctx.destination);\n\n\t\t\t// analysers all connect to nullNode, so they don't have to be reconnected when the sourceNode changes:\n\t\t\tthis._nullNode = ctx.createGain();\n\t\t\tthis._nullNode.connect(this._gainNode);\n\t\t}\n\t}, {\n\t\tkey: \"_initAnalyser\",\n\t\tvalue: function _initAnalyser() {\n\t\t\tif (this._muteNode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._audioData = [];\n\n\t\t\t// audio nodes need to be tied into a destination to work.\n\t\t\t// this gives us a destination that doesn't affect the output.\n\t\t\tvar ctx = this._context,\n\t\t\t    mute = this._muteNode = ctx.createGain();\n\t\t\tmute.gain.value = 0;\n\t\t\tmute.connect(ctx.destination);\n\n\t\t\tthis._lowAnalyser = this._createBandAnalyser(40, 250);\n\t\t\tthis._midAnalyser = this._createBandAnalyser(250, 2000);\n\t\t\tthis._highAnalyser = this._createBandAnalyser(2000, 6000);\n\t\t\tthis._allAnalyser = this._createBandAnalyser();\n\n\t\t\t// spectrum analyser:\n\t\t\tif (this._fftBins) {\n\t\t\t\tvar analyser = this._analyserNode = ctx.createAnalyser();\n\t\t\t\tanalyser.fftSize = 512;\n\t\t\t\tanalyser.maxDecibels = -15;\n\t\t\t\tthis._fftData = new Uint8Array(analyser.frequencyBinCount);\n\t\t\t\tthis._nullNode.connect(analyser);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_createBandAnalyser\",\n\t\tvalue: function _createBandAnalyser(low, high) {\n\t\t\tvar bandpass = void 0,\n\t\t\t    ctx = this._context,\n\t\t\t    compressor = ctx.createDynamicsCompressor();\n\t\t\tcompressor.threshold.value = -36;\n\t\t\tcompressor.knee.value = 35;\n\t\t\tcompressor.ratio.value = 10;\n\t\t\tcompressor.release.value = 0;\n\t\t\tcompressor.connect(this._muteNode);\n\n\t\t\t// this eliminates the initial burst:\n\t\t\tcompressor.attack.value = 1;\n\t\t\tcompressor.attack.linearRampToValueAtTime(0, ctx.currentTime + 0.1);\n\n\t\t\tif (low || high) {\n\t\t\t\tvar freq = Math.sqrt(low * high),\n\t\t\t\t    q = freq / (high - low);\n\t\t\t\tbandpass = ctx.createBiquadFilter();\n\t\t\t\tbandpass.type = \"bandpass\";\n\t\t\t\tbandpass.Q.value = q;\n\t\t\t\tbandpass.frequency.value = freq;\n\t\t\t\tbandpass.connect(compressor);\n\t\t\t}\n\n\t\t\tthis._nullNode.connect(bandpass || compressor);\n\t\t\treturn compressor;\n\t\t}\n\t}, {\n\t\tkey: \"_getVal\",\n\t\tvalue: function _getVal(bandObj, analyser, t, all) {\n\t\t\t// Safari (and some older browsers) return `reduction` as an AudioParam.\n\t\t\tvar val = analyser.reduction.value,\n\t\t\t    adj = all ? this._allAdj : this._bandAdj;\n\t\t\tval = (val === undefined ? analyser.reduction : val) * -adj;\n\t\t\tif (val > 1) {\n\t\t\t\tadj /= val;\n\t\t\t\tval = 1;\n\t\t\t\tif (all) {\n\t\t\t\t\tthis._allAdj = adj;\n\t\t\t\t} else {\n\t\t\t\t\tthis._bandAdj = adj;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn bandObj.val = val * this.gain;\n\t\t}\n\t}, {\n\t\tkey: \"_calculate\",\n\t\tvalue: function _calculate() {\n\t\t\tvar data = this._audioData,\n\t\t\t    o = data[0],\n\t\t\t    t = o.t,\n\t\t\t    thresholds = this._hitThresholds;\n\t\t\t// calculate the delta and average values:\n\t\t\tvar prevO = data[1],\n\t\t\t    deltaO = prevO,\n\t\t\t    avgI = 0;\n\t\t\tfor (var i = 1, l = data.length; i < l; i++) {\n\t\t\t\tvar o2 = data[i],\n\t\t\t\t    t2 = o2.t;\n\t\t\t\tif (t2 >= t - this._avgT) {\n\t\t\t\t\tavgI = i;\n\t\t\t\t}\n\t\t\t\tif (t2 >= t - this._deltaT) {\n\t\t\t\t\tdeltaO = o2;\n\t\t\t\t}\n\t\t\t\tif (t2 < t - this._maxT) {\n\t\t\t\t\tthis._oldObj = data.pop();l--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar _loop = function _loop(key) {\n\t\t\t\tvar band = o[key],\n\t\t\t\t    val = band.val;\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn \"continue\";\n\t\t\t\t}\n\t\t\t\tband.avg = avgI ? data.reduce(function (acc, val, i) {\n\t\t\t\t\treturn i > avgI ? acc : acc + val[key].val;\n\t\t\t\t}, 0) / avgI : 0;\n\t\t\t\tband.delta = deltaO ? val - deltaO[key].val : 0;\n\t\t\t\tband.trend = deltaO ? band.avg - data[avgI][key].avg : 0;\n\n\t\t\t\t// detect a hit:\n\t\t\t\tvar threshold = thresholds[key],\n\t\t\t\t    m = prevO ? (t - prevO.t) / 16 : 1;\n\t\t\t\tband.hit = false;\n\t\t\t\tif (prevO && !prevO[key].hit && Math.pow(val, 1.3) > threshold * 1.3) {\n\t\t\t\t\tband.hit = true;\n\t\t\t\t}\n\t\t\t\tthresholds[key] = Math.max(0.1, val, threshold - (threshold - val) * 0.15 * m);\n\t\t\t};\n\n\t\t\tfor (var key in o) {\n\t\t\t\tvar _ret = _loop(key);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_calculateSpectrum\",\n\t\tvalue: function _calculateSpectrum(o) {\n\t\t\tif (!this._fftBins) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar l = this._fftBins,\n\t\t\t    arr = [],\n\t\t\t    j = 0,\n\t\t\t    fft = this._fftData,\n\t\t\t    m = this._fftThreshold;\n\t\t\tvar analyser = this._analyserNode,\n\t\t\t    c = analyser.frequencyBinCount;\n\n\t\t\tanalyser.getByteFrequencyData(fft);\n\t\t\tfor (var i = 0; i < l; i++) {\n\t\t\t\tvar sum = 0,\n\t\t\t\t    max = (i + 1) / l * c * m,\n\t\t\t\t    j0 = j;\n\t\t\t\twhile (j < max) {\n\t\t\t\t\tsum += fft[j++];\n\t\t\t\t}\n\t\t\t\tarr[i] = sum / 255 / (j - j0);\n\t\t\t}\n\t\t\to.spectrum = arr;\n\t\t}\n\t}, {\n\t\tkey: \"_initDropTarget\",\n\t\tvalue: function _initDropTarget(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\ttarget = window;\n\t\t\t}\n\t\t\tif (typeof target === \"string\") {\n\t\t\t\ttarget = document.querySelector(target);\n\t\t\t}\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttarget.addEventListener(\"drop\", this._handleDrop.bind(this));\n\t\t\ttarget.addEventListener(\"dragenter\", this._handleDragEnter.bind(this));\n\t\t\ttarget.addEventListener(\"dragleave\", this._handleDragLeave.bind(this));\n\t\t\ttarget.addEventListener(\"dragover\", this._handleDragOver.bind(this));\n\t\t\tthis._updateUI(\"drop an MP3 to play\");\n\t\t}\n\t}, {\n\t\tkey: \"_decode\",\n\t\tvalue: function _decode(data) {\n\t\t\tthis._context.decodeAudioData(data, this._handleBufferDecode.bind(this));\n\t\t\tthis._updateUI(\"可视化加载中...\");\n\t\t}\n\n\t\t// UI:\n\n\t}, {\n\t\tkey: \"_initUI\",\n\t\tvalue: function _initUI() {\n\t\t\tvar div = this._uiDiv = document.createElement(\"div\");\n\t\t\tdiv.className = \"jam-ui\";\n\t\t\tvar sheet = document.createElement(\"style\");\n\t\t\tsheet.innerHTML = \".jam-ui{padding:0.75em;font-size:10pt;font-family:arial,sans-serif;background:#000;color:#FFF;z-index:100;position:absolute;bottom:0;left:0;}\";\n\t\t\tdocument.head.insertBefore(sheet, document.head.firstChild); // dump this at the top of head so it's easy to override.\n\t\t}\n\t}, {\n\t\tkey: \"_updateLoadUI\",\n\t\tvalue: function _updateLoadUI(p) {\n\t\t\tthis._updateUI(Math.round(p * 100) + \"%\");\n\t\t}\n\t}, {\n\t\tkey: \"_updateTimeUI\",\n\t\tvalue: function _updateTimeUI() {\n\t\t\tif (!this._buffer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar str = this._formatTime(Math.min(this._buffer.duration, this._context.currentTime - this._playT));\n\t\t\tstr += \" / \" + this._formatTime(this._buffer.duration);\n\t\t\tthis._updateUI(str);\n\t\t}\n\t}, {\n\t\tkey: \"_formatTime\",\n\t\tvalue: function _formatTime(t) {\n\t\t\tvar m = t / 60 | 0,\n\t\t\t    s = t - m * 60 | 0;\n\t\t\treturn m + \":\" + (s < 10 ? \"0\" : \"\") + s;\n\t\t}\n\t}, {\n\t\tkey: \"_updateUI\",\n\t\tvalue: function _updateUI(str) {\n\t\t\tvar div = this._uiDiv;\n\t\t\tdiv.style.display = !str ? \"none\" : \"inline-block\";\n\t\t\tdiv.innerHTML = this.label + str;\n\t\t}\n\n\t\t// event handlers:\n\n\t}, {\n\t\tkey: \"_handleKeyDown\",\n\t\tvalue: function _handleKeyDown(evt) {\n\t\t\tvar key = evt.key || evt.keyIdentifier; // old browsers do not support .key\n\t\t\tkey = key.replace(\"Arrow\", \"\"); // make matching easier\n\n\t\t\tif (key === \" \" || key === \"U+0020\") {\n\t\t\t\tthis.paused = !this.paused;\n\t\t\t} else if (key === \"Enter\") {\n\t\t\t\tthis._pausedT = 0;\n\t\t\t\tthis.play();\n\t\t\t} else if (key === \"Up\" || key === \"Down\") {\n\t\t\t\tthis.volume += 0.1 * (key === \"Up\" ? 1 : -1);\n\t\t\t} else if (key === \"Left\" || key === \"Right\") {\n\t\t\t\tvar s = (key === \"Left\" ? -1 : 1) * (evt.shiftKey ? 15 : 5) * (evt.altKey ? 12 : 1);\n\t\t\t\tthis.skip(s);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_handleEnded\",\n\t\tvalue: function _handleEnded(evt) {\n\t\t\tif (this.loop) {\n\t\t\t\tthis.seek(0);\n\t\t\t} else if (this.onended) {\n\t\t\t\tthis.onended();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_handleDragEnter\",\n\t\tvalue: function _handleDragEnter(evt) {\n\t\t\tthis._handleDragLeave(evt);\n\t\t\tvar el = evt.currentTarget,\n\t\t\t    target = el === window ? document.body : el;\n\t\t\ttarget.className += \" jam-drop\";\n\t\t}\n\t}, {\n\t\tkey: \"_handleDragLeave\",\n\t\tvalue: function _handleDragLeave(evt) {\n\t\t\tevt.preventDefault();\n\t\t\tvar el = evt.currentTarget,\n\t\t\t    target = el === window ? document.body : el;\n\t\t\ttarget.className = target.className.replace(/\\b\\s?jam-drop\\b/, \"\");\n\t\t}\n\t}, {\n\t\tkey: \"_handleDragOver\",\n\t\tvalue: function _handleDragOver(evt) {\n\t\t\tthis._handleDragEnter(evt);\n\t\t}\n\t}, {\n\t\tkey: \"_handleDrop\",\n\t\tvalue: function _handleDrop(evt) {\n\t\t\tthis._handleDragLeave(evt);\n\t\t\tthis.abort();\n\t\t\tvar reader = new FileReader();\n\t\t\treader.addEventListener('load', this._handleDropLoad.bind(this));\n\t\t\treader.readAsArrayBuffer(evt.dataTransfer.files[0]);\n\t\t}\n\t}, {\n\t\tkey: \"_handleDropLoad\",\n\t\tvalue: function _handleDropLoad(evt) {\n\t\t\tthis._decode(evt.target.result);\n\t\t}\n\t}, {\n\t\tkey: \"_handleURILoad\",\n\t\tvalue: function _handleURILoad(evt) {\n\t\t\tthis._decode(evt.target.response);\n\t\t\tthis._request = null;\n\t\t}\n\t}, {\n\t\tkey: \"_handleURIProgress\",\n\t\tvalue: function _handleURIProgress(evt) {\n\t\t\tvar p = evt.loaded / evt.total;\n\t\t\tthis.onprogress && this.onprogress(p);\n\t\t\tthis._updateLoadUI(p);\n\t\t}\n\t}, {\n\t\tkey: \"_handleBufferDecode\",\n\t\tvalue: function _handleBufferDecode(buffer) {\n\t\t\tthis._buffer = buffer;\n\t\t\tthis._pausedT = 0;\n\t\t\tthis._playT = this._context.currentTime;\n\t\t\tthis.ondecode && this.ondecode(buffer);\n\t\t\tthis._updateTimeUI();\n\t\t\tif (!this._paused) {\n\t\t\t\tthis.play();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"paused\",\n\t\tget: function get() {\n\t\t\treturn this._paused;\n\t\t},\n\t\tset: function set(val) {\n\t\t\tif (!val === this._paused) {\n\t\t\t\t!val ? this.play() : this.pause();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"keyControl\",\n\t\tget: function get() {\n\t\t\treturn this._keyControl;\n\t\t},\n\t\tset: function set(val) {\n\t\t\tval = !!val;\n\t\t\tif (this._keyControl === val) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._keyControl = val;\n\t\t\tif (val) {\n\t\t\t\tdocument.addEventListener(\"keydown\", this._bound_handleKeyDown);\n\t\t\t} else {\n\t\t\t\tdocument.removeEventListener(\"keydown\", this._bound_handleKeyDown);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"tickInterval\",\n\t\tget: function get() {\n\t\t\treturn this._tickInterval;\n\t\t},\n\t\tset: function set() {\n\t\t\tvar val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n\n\t\t\tclearInterval(this._tickIntervalID);\n\t\t\tthis._tickIntervalID = val > 0 ? setInterval(this.tick.bind(this), val) : 0;\n\t\t}\n\t}, {\n\t\tkey: \"volume\",\n\t\tget: function get() {\n\t\t\treturn this._gainNode.gain.value;\n\t\t},\n\t\tset: function set(val) {\n\t\t\tthis._gainNode.gain.value = Math.max(0, Math.min(2, val));\n\t\t}\n\t}, {\n\t\tkey: \"ui\",\n\t\tget: function get() {\n\t\t\treturn this._ui;\n\t\t},\n\t\tset: function set(val) {\n\t\t\tval = !!val;\n\t\t\tif (this._ui === val) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._ui = val;\n\t\t\tvar div = this._uiDiv;\n\t\t\tif (val) {\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t} else {\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"audioData\",\n\t\tget: function get() {\n\t\t\treturn this._audioData && this._audioData[0] || JustAddMusic.DEFAULT_AUDIO_DATA;\n\t\t}\n\t}]);\n\n\treturn JustAddMusic;\n}();\n\nJustAddMusic.DEFAULT_FREQUENCY_RANGE = { val: 0, avg: 0, delta: 0, trend: 0, hit: false };\nJustAddMusic.DEFAULT_AUDIO_DATA = {\n\tt: 0, spectrum: [],\n\tlow: JustAddMusic.DEFAULT_FREQUENCY_RANGE,\n\tmid: JustAddMusic.DEFAULT_FREQUENCY_RANGE,\n\thigh: JustAddMusic.DEFAULT_FREQUENCY_RANGE,\n\tall: JustAddMusic.DEFAULT_FREQUENCY_RANGE\n};","count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"toc":"","data":[]}